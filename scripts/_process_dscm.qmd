---
title: "Deep sea cameras"
number-sections: false
date: today
format: 
  html:
    self-contained: true
    code-fold: true
    toc: true
    toc-location: right
---

```{r, message = F, warning = F, fig.width = 10, fig.height = 10, echo = F}
library(paletteer)
library(sf)
library(bigrquery)
library(gt)
library(tidyverse)

knitr::opts_chunk$set(eval = F, warning = F, message = F, include = F, echo = F)

PristineSeasR::set_ps_paths(email = "marine.data.science@ngs.org")

exp_id <- "RMI_2023"

exp_path <- file.path(ps_science_path, "expeditions", "RMI-2023")

ps_data_path <- file.path(ps_science_path, "datasets/")

bigrquery::bq_auth(email = "marine.data.science@ngs.org")

bq_connection <- DBI::dbConnect(bigrquery::bigquery(), project = "pristine-seas")
```

# Metadata

```{r dscm, eval = TRUE, include = T}
dscm_fieldbook <- readxl::read_excel(file.path(exp_path, 
                                        paste0("data/primary/raw/dscm/",
                                               exp_id,
                                               "_dscm_fieldbook.xlsx"))) |> 
  as_tibble() |> 
  janitor::clean_names()
  
dscm_meta <- dscm_fieldbook |>  
  rename(ps_site_id = ps_station_id,
         lead_operator = team_lead) |> 
  mutate(extech_expedition_id = "DOEX0090_RMI",
         ps_site_id = str_replace(ps_site_id, "RMI", "RMI_2023"),
         ps_expedition_id = exp_id, 
         method = "Deep sea camera",
         across(c(date_in, date_out), lubridate::ymd),
         across(c(time_in, time_out, recording_time_hrs, mission_duration_hrs), hms::as_hms)) |> 
  select(ps_expedition_id, method, ps_site_id, location, 
         deployment_date = date_in, deployment_time = time_in, deployment_lon = lon_in, deployment_lat = lat_in,  
         recovery_date = date_out, recovery_time = time_out, recovery_lon = lon_out, recovery_lat = lat_out, 
         mission_duration_hrs, recording_time = recording_time_hrs,
         max_depth_m = depth_m, bottom_type = habitat, 
         bait_type , bait_kg, ballast_type, ballast_kg, 
         dscm_id, 
         extech_expedition_id, 
         lead_operator, notes, highlights)
```

```{r dscm_map, eval = TRUE, include = T}
tmp <- dscm_meta |> 
  filter(!is.na(max_depth_m)) |> 
  st_as_sf(coords = c("deployment_lon", "deployment_lat"), crs = 4326) |> 
  group_by(method, ps_site_id, location, max_depth_m, geometry) 

mapview::mapview(tmp,
                 zcol = c(depth_m = "max_depth_m"), 
                 legend = TRUE,
                 col.regions = paletteer_c("ggthemes::Red-Gold", 3),
                 map.types = c("Esri.WorldImagery"),
                 layer.name = "Depth (m)",
                 popup = leafpop::popupTable(tmp,
                                      zcol = c("method",
                                               "ps_site_id",
                                               "location",
                                               "max_depth_m")))
```

```{r dscm_table, eval = TRUE, include = T}
dscm_meta |> 
  filter(!is.na(max_depth_m)) |> 
  mutate(strata = case_when(max_depth_m < 500 ~ "<500m",
                            max_depth_m < 1000 ~ "500-1000m",
                            max_depth_m < 2000 ~ "1000-2000m",
                            max_depth_m >= 2000 ~ "> 2000m")) |> 
  group_by(location, strata) |> 
  summarize(n_stations = n_distinct(ps_site_id),
            mean_depth_m = round(mean(max_depth_m, na.rm = T),1),
            min_depth_m = min(max_depth_m, na.rm = T),
            max_depth_m = max(max_depth_m, na.rm = T)) |> 
  ungroup() |> 
  mutate_if(is.numeric, round, 3) |> 
  gt::gt(groupname_col  = "location", rowname_col = "strata") |> 
  tab_spanner(label = "Depth", columns = contains("depth")) |> 
  grand_summary_rows(columns  = contains(c("n_stations")),
                     fns = list(list(label = md("**Grand total**"), fn = "sum")),
                     fmt = ~ fmt_number(., decimals = 0, use_seps = FALSE)) |> 
  grand_summary_rows(columns  = contains(c("mean_depth_m")),
                     fns = list(list(label = md("**Grand total**"), fn = "mean")),
                     fmt = ~ fmt_number(., decimals = 0, use_seps = FALSE)) |> 
  grand_summary_rows(columns  = contains(c("min_depth_m")),
                     fns = list(list(label = md("**Grand total**"), fn = "min")),
                     fmt = ~ fmt_number(., decimals = 0, use_seps = FALSE)) |> 
  grand_summary_rows(columns  = contains(c("max_depth_m")),
                     fns = list(list(label = md("**Grand total**"), fn = "max")),
                     fmt = ~ fmt_number(., decimals = 0, use_seps = FALSE)) |> 
  tab_header(title = "Number of dropcam deployments per location and depth") |> 
  opt_align_table_header(align = "left") |> 
  tab_style(locations = cells_grand_summary(),
            style = cell_fill(color = "lightblue" |> adjust_luminance(steps = +2))) |> 
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_row_groups()) |> 
  tab_options(ihtml.use_compact_mode = TRUE,
              data_row.padding = px(5)) |> 
  cols_label("n_stations" ~ "# Deployments") |> 
  cols_label_with(fn = ~str_extract(.x, "[^_]+") |> 
                    str_to_sentence()) 
```

```{r dscm_NAs, eval = TRUE, include = T}
naniar::vis_miss(dscm_meta)
```

```{r dscm_export, eval = F}
bigrquery::bq_table_upload("pristine-seas.deep_sea_cameras.deployments", 
                           values = dscm_meta, fields = dscm_meta, write_disposition = 'WRITE_APPEND')
```

